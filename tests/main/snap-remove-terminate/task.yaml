summary: Ensure that the remove --terminate flag kills running snap apps.

details: |
    This test spawns a snap app background process and checks that it
    gets terminated when removing with the --terminate flag.

systems:
    # Ubuntu 14.04's special version of systemd doesn't have StartTransientUnit API.
    - -ubuntu-14.04-*

environment:
    BAD_SNAP/fork_bomb: fork-bomb
    BAD_SNAP/no_fork_bomb: no-fork-bomb

prepare: |
    "$TESTSTOOLS"/snaps-state install-local fork-bomb

restore: |
    systemctl stop test-kill.service || true
    systemctl reset-failed test-kill.service || true

debug: |
    journalctl -u test-kill.service

execute: |
    echo "Start a long running process"
    lockfile="$(pwd)/lockfile"
    touch "$lockfile"

    sh_snap_bin="$(command -v fork-bomb.sh)"
    if [ "$BAD_SNAP" = "fork-bomb" ]; then
        #shellcheck disable=SC2016
        systemd-run --unit test-kill.service flock "$lockfile" "$sh_snap_bin" -c 'touch /var/snap/fork-bomb/common/alive; $SNAP/bin/fork-bomb'
    else
        #shellcheck disable=SC2016
        systemd-run --unit test-kill.service flock "$lockfile" "$sh_snap_bin" -c 'touch /var/snap/fork-bomb/common/alive; sleep 100000'
    fi
    # Wait for service to be up
    retry -n 10 test -f /var/snap/fork-bomb/common/alive

    echo "Lock is held"
    not flock --timeout 0 "$lockfile" --command "true"

    echo "Remove snap with --terminate flag"
    snap remove --terminate fork-bomb

    echo "Running process should be terminated after remove change is complete and lockfile should be unlocked"
    flock --timeout 60 "$lockfile" --command "true"
